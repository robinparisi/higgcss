[class*="grid-"] {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: stretch;
}

[class*="grid-"] > * {
  flex: 0 0 auto;
  display: block; /* IE fix */
}

// equal grid no gutter (when gutter = 0)
.grid(@number:@number, @gutter:@gutter) when (@gutter = 0) {
  & > * {
    width: ~'calc(100% * 1 / @{number})';
  }
}

// equal grid with gutter (avoid percentage since it doesn't work for margin bottom)
.grid(@number:@number, @gutter:@gutter) {
  & {
    margin-left: -@gutter;
  }

  & > * {
    width: ~'calc(100% * 1 / @{number} - @{gutter})';
    margin-left: @gutter;
    margin-bottom: @gutter
  }
}

// unqual grid no gutter (when gutter = 0)
.unequalGrid(@column1, @column2, @gutter:@gutter) when (@gutter = 0) {
  & > :nth-child(odd) {
    @size : (@column1 * 100%) / (@column1 + @column2);
    width: ~'calc(@{size})';
  }

  & > :nth-child(even) {
    @size : (@column2 * 100%) / (@column1 + @column2);
    width: ~'calc(@{size})';
  }
}

// equal grid with gutter
.unequalGrid(@column1, @column2, @gutter:@gutter) {
  @g : @gutter / 2;

  & > :nth-child(odd) {
    @size : (@column1 * 100%) / (@column1 + @column2);
    width: ~'calc(@{size} - @{g})';
  }

  & > :nth-child(even) {
    @size : (@column2 * 100%) / (@column1 + @column2);
    width: ~'calc(@{size} - @{g} )';
    margin-left: @gutter;
  }
}

/* vertical align
-------------------------------------------------------------- */

[class*="grid-top"] {
  align-items: flex-start;
}

[class*="grid-bottom"] {
  align-items: flex-end;
}

[class*="grid-middle"] {
  align-items: center;
}
