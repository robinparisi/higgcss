@use "sass:string";

// -------------------------------------------------------------
// spacing
// -------------------------------------------------------------

// thanks to Kitty Giraudel
// used to "cast" float to string (0.5 => 05)
@function str-replace($string, $search, $replace: "") {
  $string: "#{$string}";
  $index: string.index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin spacing($prefix, $property, $sizes) {
  @each $size in $sizes {
    .#{$prefix}#{str-replace($size, '.')} {
      @if $size == 0 {
        #{$property}: #{$size};
      } @else {
        #{$property}: #{$size}rem;
      }
    }
  }
}

@each $spacerKey, $spacerValue in $spacers {
  @if $spacerKey == base {
    @each $class, $prop, $values in map-get($spacers, $spacerKey) {
      @each $value in $values {
        .#{$class}#{str-replace($value, '.')} {
          @if $value == 0 {
            #{$prop}: #{$value};
          } @else {
            #{$prop}: #{$value}rem;
          }
        }
      }
    }
  } @else {
    @media (max-width: map-get($breakpoints, $spacerKey)) {
      @each $class, $prop, $values in map-get($spacers, $spacerKey) {
        @each $value in $values {
          .#{$spacerKey}\:#{$class}#{str-replace($value, '.')} {
            @if $value == 0 {
              #{$prop}: #{$value};
            } @else {
              #{$prop}: #{$value}rem;
            }
          }
        }
      }
    }
  }
}

// specific spacers
// --------------------------------------------------------------

.mt-gap {
  margin-top: $gap;
}

.mb-gap {
  margin-bottom: $gap;
}
